create table t1 (
a int,
key (a desc)
);
insert into t1 select seq from seq_1_to_1000;
set optimizer_trace=1;
explain select * from t1 force index(a) where a in (2, 4, 6);
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	a	a	5	NULL	3	Using where; Using index
select json_detailed(json_extract(trace, '$**.range_access_plan.ranges'))
from information_schema.optimizer_trace;
json_detailed(json_extract(trace, '$**.range_access_plan.ranges'))
[
    
    [
        "(6) <= (a) <= (6)",
        "(4) <= (a) <= (4)",
        "(2) <= (a) <= (2)"
    ]
]
set optimizer_trace=default;
# These should go in reverse order:
select * from t1 force index(a) where a in (2, 4, 6);
a
6
4
2
drop table t1;
#
# Multi-part key tests
#
create table t1 (
a int not null,
b int not null,
key ab(a, b desc)
);
insert into t1 select A.seq, B.seq*10 from seq_1_to_10 A, seq_1_to_10 B;
set optimizer_trace=1;
explain select * from t1 force index(ab) where a>=8 and b>=50;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	ab	ab	4	NULL	51	Using where; Using index
select json_detailed(json_extract(trace, '$**.range_access_plan.ranges'))
from information_schema.optimizer_trace;
json_detailed(json_extract(trace, '$**.range_access_plan.ranges'))
[
    
    [
        "(8) <= (a)"
    ]
]
explain select * from t1 force index(ab) where a>=8 and b<=50;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	ab	ab	8	NULL	46	Using where; Using index
select json_detailed(json_extract(trace, '$**.range_access_plan.ranges'))
from information_schema.optimizer_trace;
json_detailed(json_extract(trace, '$**.range_access_plan.ranges'))
[
    
    [
        "(8,50) <= (a,b)"
    ]
]
select * from t1 force index(ab) where a>=8 and b<=50;
a	b
8	50
8	40
8	30
8	20
8	10
9	50
9	40
9	30
9	20
9	10
10	50
10	40
10	30
10	20
10	10
select * from t1 ignore index(ab) where a>=8 and b<=50 order by a, b desc;
a	b
8	50
8	40
8	30
8	20
8	10
9	50
9	40
9	30
9	20
9	10
10	50
10	40
10	30
10	20
10	10
explain
select * from t1 where a between 2 and 4 and b between 50 and 80;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	ab	ab	8	NULL	17	Using where; Using index
select json_detailed(json_extract(trace, '$**.range_access_plan.ranges'))
from information_schema.optimizer_trace;
json_detailed(json_extract(trace, '$**.range_access_plan.ranges'))
[
    
    [
        "(2,80) <= (a,b) <= (4,50)"
    ]
]
select * from t1 where a between 2 and 4 and b between 50 and 80;
a	b
2	80
2	70
2	60
2	50
3	80
3	70
3	60
3	50
4	80
4	70
4	60
4	50
drop table t1;
create table t2 (
a int not null,
b int not null,
key ab(a desc, b desc)
);
insert into t2 select A.seq, B.seq*10 from seq_1_to_10 A, seq_1_to_10 B;
explain
select * from t2 where a between 2 and 4;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	range	ab	ab	4	NULL	40	Using where; Using index
select json_detailed(json_extract(trace, '$**.range_access_plan.ranges'))
from information_schema.optimizer_trace;
json_detailed(json_extract(trace, '$**.range_access_plan.ranges'))
[
    
    [
        "(4) <= (a) <= (2)"
    ]
]
explain
select * from t2 where a between 2 and 4 and b between 50 and 80;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t2	range	ab	ab	8	NULL	31	Using where; Using index
select json_detailed(json_extract(trace, '$**.range_access_plan.ranges'))
from information_schema.optimizer_trace;
json_detailed(json_extract(trace, '$**.range_access_plan.ranges'))
[
    
    [
        "(4,80) <= (a,b) <= (2,50)"
    ]
]
set optimizer_trace=default;
drop table t2;
